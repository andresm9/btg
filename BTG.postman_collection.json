{
	"info": {
		"_postman_id": "b51cc2a0-5f28-4518-b196-9d555fc395fb",
		"name": "BTG",
		"description": "This is the list of Endpoint to Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1400223"
	},
	"item": [
		{
			"name": "Login and Register Users",
			"item": [
				{
					"name": "Register New Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"simpleuser@example.com\",\n    \"password\": \"simpleuser\",\n    \"name\": \"Simple User\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Creates a new Customer / User with profile \"Customer\""
					},
					"response": []
				},
				{
					"name": "Register New ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin\",\n    \"name\": \"Admin User\",\n    \"roles\": [\"Admin\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Creates a new user with ADMIN profile. Should indicate the roles as a list."
					},
					"response": []
				},
				{
					"name": "Login Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should contain access_token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('access_token');",
									"    pm.environment.set(\"USER_TOKEN\", responseJson.access_token);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "simpleuser@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "simpleuser",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Validate an user credentials and generate JWT Token"
					},
					"response": []
				},
				{
					"name": "Login ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should contain access_token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('access_token');",
									"    pm.environment.set(\"ADMIN_TOKEN\", responseJson.access_token);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Validate an admin credentials and generate JWT Token"
					},
					"response": []
				}
			],
			"description": "Contains the User and Admin creation and Login"
		},
		{
			"name": "Fund Operations",
			"item": [
				{
					"name": "Create a Fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"FUND_ID\", responseJson.id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ADMIN_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Fund VOO\",\n    \"minimumFee\": 50,\n    \"category\": \"any\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/funds/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"funds",
								"create"
							]
						},
						"description": "This creates a sample fund. Requires ADMIN profile and a Valid Token"
					},
					"response": []
				},
				{
					"name": "get List of Funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ADMIN_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/funds/list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"funds",
								"list"
							]
						},
						"description": "Returns a list of existing funds in the system. Requires a valid token"
					},
					"response": []
				},
				{
					"name": "Subscribe to a Fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"// Additional tests can be added here according to actual response data structure\r",
									"pm.test(\"Balance is correct\", function () {\r",
									"    \r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.current_balance).to.equal(450);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/funds/subscribe/{{FUND_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"funds",
								"subscribe",
								"{{FUND_ID}}"
							]
						},
						"description": "Subscribe the current user to a fund indicating the Fund ID in the URL"
					},
					"response": []
				},
				{
					"name": "Cancel a Fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Balance is correct\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.current_balance).to.equal(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/funds/cancel/{{FUND_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"funds",
								"cancel",
								"{{FUND_ID}}"
							]
						},
						"description": "Delete the user subscription from a fund, providing the Fund ID to cancel in the URL"
					},
					"response": []
				},
				{
					"name": "list Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/funds/transactions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"funds",
								"transactions"
							]
						},
						"description": "List the current user transactions"
					},
					"response": []
				}
			],
			"description": "This contains all possible operations to do with the funds"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "USER_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FUND_ID",
			"value": "",
			"type": "default"
		},
		{
			"key": "ADMIN_TOKEN",
			"value": "",
			"type": "string"
		}
	]
}